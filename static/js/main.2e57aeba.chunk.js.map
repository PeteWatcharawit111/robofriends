{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","console","log","fetch","then","response","json","users","this","filteredRobots","filter","element","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCSOK,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAYD,EAAOE,KAAI,SAACC,EAAOC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGT,GAAIA,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,WAG1F,OACC,6BACEO,ICKWK,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCCI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCoDKC,E,kDAjDd,aAAe,IAAD,8BACb,gBAoBDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SArBzC,EAAKC,MAAQ,CACZzB,OAAQ,GACRsB,YAAa,IAJD,E,gEAQO,IAAD,OACnBI,QAAQC,IAAI,qBACZC,MAAM,8CAA8CC,MAAK,SAAAC,GAExD,OADgBA,EAASC,UAGzBF,MAAK,SAAAG,GAEL,EAAKX,SAAS,CAACrB,OAASgC,S,+BAWhB,IAAD,EACsBC,KAAKR,MAA5BzB,EADC,EACDA,OAAQsB,EADP,EACOA,YACTY,EAAiBlC,EAAOmC,QAAO,SAACC,EAAQhC,GAC7C,OAAOgC,EAAQ3C,KAAK4C,cAAcC,SAAShB,EAAYe,kBAKxD,OAAQrC,EAAOuC,OAEX,yBAAK3C,UAAU,MACf,2CACA,kBAAC,EAAD,CAAUW,aAAgB0B,KAAKd,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAUkC,MALrB,2C,GAtCYM,IAAMC,W,MCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAQ,kBAAC,EAAD,MACfC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.2e57aeba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardArray = robots.map((robot, i) => {\r\n\t\treturn <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t});\r\n\t//console.log(cardArray);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardArray}\r\n\t\t</div>\r\n\r\n\t)\r\n\r\n};\t\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn ( \r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../Components/CardList.js';\r\n//import { robots } from './robots';\r\nimport SeachBox from '../Components/SearchBox.js';\r\nimport Scroll from '../Components/Scroll.js';\r\n\r\nclass App extends React.Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(\"componentDidMount\");\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\").then(response => {\r\n\t\t\tconst respond = response.json();\r\n\t\t\treturn respond;\r\n\t\t})\r\n\t\t.then(users => {\r\n\t\t\t\r\n\t\t\tthis.setState({robots : users});\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\t//console.log(\"event.target.value\", event.target.value);\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {robots, searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter((element,i) => {\r\n\t\t\treturn element.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t});\r\n\t\t//console.log(filteredRobots);\r\n\r\n\r\n\t\treturn !robots.length ? \r\n\t\t\t\t\t(<h1>Loading</h1>) : \r\n\t\t\t\t\t(<div className='tc'>\r\n\t\t\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t\t\t<SeachBox searchChange = {this.onSearchChange} />\r\n\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t<CardList robots = {filteredRobots} />\r\n\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t </div>\r\n\t\t\t\t\t)\r\n\t\t\t\r\n\t}\r\n};\t\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App.js';\nimport './Containers/App.css';\nimport * as serviceWorker from './serviceWorker.js';\nimport 'tachyons';\n\n\nReactDOM.render( <App/>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}